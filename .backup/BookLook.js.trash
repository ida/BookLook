function BookLook(element,
//
// What
// ----
//
// Turn a passed ele's content into a book and paginate all the children.
//
//
// Usage
// -----
//
// Include this script in the head-ele of your html-doc, then call BookLook
// off one of your Javascripts after DOM loaded and pass any element to it:
//
//
//    var element = document.body
//
//    BookLook(element)
//
//
// Optionally pass these parameters, too:


  pagesPerBookWidth = null, // nr, default to 1 unless pageWidth is passed,
                            // then squeeze as much pages as fit in bookWidth

  pageWidth = null,         // px, default to bookWidth/pagesPerBookWidth


  pageHeight = null,        // px, default to visible height of book


  cssSelectorPrefix='book'  // className of book, prepended to all style-rules


// Example for two-column-layout with fixed width and full visible height:
//
//    BookLook(element, 2, 333, null)
//
//
//
// How
// ---
//
// Create a page-ele, prepend it to children of passed ele, fill page-ele
// with following siblings until wanted pageHeight breaks, create new page-ele,
// repeat until there are no more folliwing siblings.
//
// If a page breaks in the middle of a child-ele, split child into two and move
// second child onto next page.
//
//
// Why
// ---
//
// https://twitter.com/ldanielswakman/status/953225103017435136
// "Looking for a way for a variable block of text to automatically
// flow to a required number of columns (...) Column height/width defined."
//
//
//
//
// That's it folks, interested developers may look at ini() to follow the flow.
//
///////////////////////////////////////////////////////////////////////////////

) {



var book = null         // we want to create a book

var page = null         // a book consists of pages

var paragraph = null    // a page consists of paragraphs



function addBook() {
  book = document.createElement('div')
  book.className = cssSelectorPrefix
  element.appendChild(book)
}
function addFirstPage() {
  page = document.createElement('div')
  page.className = 'page'
  book.appendChild(page)
}
function addPage() {
  page = document.createElement('div')
  page.className = 'page'
  book.appendChild(page)
}
function getBottomSpaceHeight(ele) {
  var props = ['margin-bottom', 'border-bottom-width', 'padding-bottom']
  var height = getSumOfCssProps(ele, props)
  return height
}
function getStyle(ele, prop) {
  return parseFloat(window.getComputedStyle(ele).getPropertyValue(prop))
}
function getSumOfCssProps(ele, props) {
  var sum = 0
  for(var i=0; i < props.length; i++) {
    var prop = props[i]
    var value = parseFloat(getStyle(ele, prop))
    sum += value
  }
  return sum
}
function getTextHeight(ele) {
  // ele.clientHeight = inner height of an element in pixels, including padding
  //                 but not the horizontal scrollbar height, border, or margin
  var props = ['padding-top', 'padding-bottom']
  var height = getSumOfCssProps(ele, props) * -1
  height += ele.clientHeight
  return height
}
function getTopSpaceHeight(ele) {
  var props = ['margin-top', 'border-top-width', 'padding-top']
  var height = getSumOfCssProps(ele, props)
  return height
}
function handlePageBreak() {
  var visibleLinesAmount = getAmountOfVisibleLinesOfPara()
  paragraph = page.children[page.children.length-1]
  if(visibleLinesAmount > 0) {
    splitParaIntoTwoAtNthLineBreak(visibleLinesAmount)
  }
}
function fillBook(paragraphs) {
  for(var i=0; i < paragraphs.length; i++) {
    paragraph = document.createElement(element.children[i].tagName)
    paragraph.innerHTML = element.children[i].innerHTML
    page.appendChild(paragraph)
    if(page.clientHeight > pageHeight) {
      handlePageBreak(page)
    }
  }
}
function pageBroke(page) {
  return page.clientHeight > pageHeight
}
function setContent() {
  // Add initial content.
  addBook()
  addPage()
}
function setStyles() {
  // Add styles as style-ele in head-ele.
  var bookSelector = '.' + cssSelectorPrefix
  var pageSelector = bookSelector + ' .page'
  var paragraphSelector = pageSelector + ' > *'
  
  var styleEle = document.createElement('style')
  var styles = `



` + bookSelector + ` {
    background: #000;
    color: #fff;
    counter-reset: pagenr;
}



` + pageSelector + ` {
  counter-increment: pagenr;
  display: inline-block;
  margin: 1em;
  min-height: ` + pageHeight + `px;
  position: relative;
  top: 0;
  left: 0;
  outline: 1px dotted #555;
  vertical-align: top;
  width: ` + pageWidth + `px;
}


` + pageSelector + `:after {
  content: counter(pagenr);
  position: absolute;
  margin-top: -1em;
  left: ` + pageWidth / 2 + `px;
}


` + paragraphSelector + `:first-child {
  padding-top: 0;
  margin-top: 0;
}


` + paragraphSelector + `:last-child {
  padding-bottom: 0;
  margin-bottom: 0;
}


  ` // EO styles
  styleEle.innerHTML = styles
  document.head.appendChild(styleEle)
}
function setParamaterDefaults() {
//
//  Set default values for the passable vars of BookLook.
//
  var bookWidth = element.clientWidth
  if(pagesPerBookWidth === null) {
    if(pageWidth === null) {
      pagesPerBookWidth = 1
    }
    else {
      pagesPerBookWidth = bookWidth / pageWidth
    }
  }
  if(pageHeight === null) {
    pageHeight = element.clientHeight
  }
  if(pageWidth === null) {
    pageWidth = bookWidth / pagesPerBookWidth
  }
}
function getAmountOfVisibleLinesOfPara() {

  var visibleLinesAmount = 0

  var lineHeight = getStyle(paragraph, 'line-height')

  var pageContentHeight = getTextHeight(page)

  pageContentHeight -= getTextHeight(paragraph)

  while(pageContentHeight < pageHeight) {
    pageContentHeight  += lineHeight
    visibleLinesAmount += 1
  }

  return visibleLinesAmount
}
function splitParaIntoTwoAtNthLineBreak(n) {
// Refill para with text char by char until nth line breaks.
  var lineHeight = getStyle(paragraph, 'line-height')
  var text = paragraph.innerHTML
  var newText = ''
  var breakPos = text.length-1 // remember pos of last space for splitpoint at linebreak
  paragraph.innerHTML = ''
  for(var i=0; i < text.length; i++) {
    var character = text[i]
    if(character == ' ') breakPos = i
    paragraph.innerHTML += character
    if(paragraph.clientHeight > lineHeight * n) {i
      if(breakPos === null) {  // in case no space was found before pagebreak ...
        breakPos = i           // ... breakPos is current pos
      }
      break
    }
  }
  paragraph.innerHTML = text.slice(0, breakPos)
  paragraph = document.createElement(paragraph.tagName)
  paragraph.innerHTML = text.slice(breakPos)
  addPage()
  page.appendChild(paragraph)
}
function ini() {

  element.style.visibility = 'hidden'           // hide ele

 
  setParamaterDefaults()

  setStyles()

  setContent()
 
 
  fillBook(element.children)


  element.innerHTML = ''                        // empty ele of content
 
  element.insertBefore(book, element.firstNode) // fill ele with book
 
  element.style.visibility = 'visible'          // show ele again

}

  ini()

} // End of global wrapper-function BookLook()
